#!/usr/bin/env ruby
$:.unshift File.join File.dirname(__FILE__), "..", "lib"
require "rubygems"
require "wp2tumblr"
require "yaml"
require "optparse"

options = {}
site = "http://www.tumblr.com"

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: wp2tumblr COMMAND [OPTIONS]"
  opt.separator ""
  opt.separator "Commands"
  opt.separator "    text: upload posts as type 'text'"
  opt.separator "    config: configure your Tumblr API credentials"
  opt.separator "    server: start up a sinatra server to capture the oauth_verifier"
  opt.separator ""
  opt.separator "Options"

  opt.on("-b", "--blog_name Blog Name", "The name of the Tumblr blog, ex. 'myblog.tumblr.com'") do |blog_name|
    options[:blog_name] = blog_name
  end

  opt.on("-f", "--file XML File", "The absolute path to the wordpress xml export file") do |file|
    options[:file] = file
  end
end

opt_parser.parse!

puts opt_parser unless ARGV[0]

tumblr_config_path = File.join ENV['HOME'], '.wp2tumblr'

if ARGV[0] === "server"
  puts "starting sinatra server, register 'http://localhost:9292/callback' as your apps' callback url."
  system("rackup -Ilib #{File.join File.dirname(__FILE__), "..", "lib", "server"}/config.ru")
end

if ARGV[0] === "config"
  api_config = {}
  puts "Register an application at: #{site}/oauth/apps"

  print "OAuth Consumer key: "
  api_config[:consumer_key] = $stdin.gets.chomp

  print "OAuth Consumer secret: "
  api_config[:consumer_secret] = $stdin.gets.chomp

  consumer = OAuth::Consumer.new(api_config[:consumer_key], api_config[:consumer_secret], :site => site)
  request_token = consumer.get_request_token :exclude_callback => true

  puts request_token.authorize_url

  puts "After you have received your oauth_verifier, paste it below."
  puts "OAuth Verifier: "
  api_config[:verifier] = $stdin.gets.chomp

  access_token = request_token.get_access_token :oauth_verifier => api_config[:verifier]
  api_config[:oauth_token] = access_token.token
  api_config[:oauth_token_secret] = access_token.secret

  Wp2tumblr::Config.save_api_credentials(api_config, ".wp2tumblr")

  puts "Credentials saved, run 'wp2tumblr COMMAND [OPTIONS]' again"
end

if File.exists?(tumblr_config_path)

  config = YAML.load_file tumblr_config_path
  client = Wp2tumblr::TumblrClient.new(config["consumer_key"], config["consumer_secret"], config["oauth_token"], config["oauth_token_secret"])
  file = File.open(options[:file]) if options[:file] and File.exists?(options[:file])

  if ARGV[0] === "text"
    if client.connect
      puts "Successfully authenticated with Tumblr!"
      puts "Posting text posts with the options: #{options.inspect}"
    else
      puts "There was an error authenticating with Tumblr. Please check #{tumblr_config_path} and make sure your credentials are correct."
    end

    if file
      posts = Wp2tumblr::Wordpress.parse_xml(file, :posts)
      client.text_posts(options[:blog_name], posts)
    else
      puts "The path to your XML file is incorrect: #{options[:file]}"
    end
  end

else
  puts ""
  puts "You need to configure your Tumblr API credentials."
  puts "run 'wp2tumblr config'"
end
